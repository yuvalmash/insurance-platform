{"version":3,"sources":["models/models.ts","stores/currentDataStore.ts","components/header/header.tsx","stores/userStore.ts","components/toast/toastUtil.ts","pages/Submissions/Submissions.tsx","pages/Action/Action.tsx","pages/Bind/Bind.tsx","components/login/Login.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Btn","Status","draftFormValues","id","companyName","address","annualRevenue","status","NEW","signedApplication","submittedBy","CurrentDataStore","data","this","observable","action","a","allSubmissions","some","submission","forEach","element","index","push","fetch","method","headers","Accept","body","JSON","stringify","then","res","json","filter","submissions","clearCurrentSubmission","all","fullName","fileName","formData","console","log","catch","er","createContext","Header","observer","props","currentDataStore","useContext","className","onClick","renderPage","Submissions","Actions","UserStore","password","statusText","err","resp","isLoging","success","message","toast","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","draggablePercent","error","userStore","useState","currentData","shouldReloadList","setShouldReloadList","columns","setColumns","setData","isData","setIsData","download","blob","filename","url","window","URL","createObjectURL","document","createElement","style","display","href","appendChild","click","removeChild","revokeObjectURL","downloadPdf","ToastUtil","Columns","accessor","Cell","row","original","submissionFromCurrentList","setActivePage","editSubmission","deleteSubmission","paddingLeft","Bind","bindSubmission","useEffect","init","getAllSubmissions","TableInstance","useTable","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","map","headerGroup","getHeaderGroupProps","column","getHeaderProps","render","getRowProps","cells","cell","getCellProps","Action","isCreateNewMode","setCreateNewMode","useForm","defaultValues","register","handleSubmit","reset","formState","errors","onSubmit","createOrUpdateNewSubmission","newUserId","uuidv4","type","placeholder","toString","valueAsNumber","undefined","picture","name","split","length","FormData","append","uploadFile","currentSubmission","getCurrentSubmission","BOUND","Login","show","setShow","authenticateUser","onClose","visibility","opacity","htmlFor","required","App","activePage","loginPopup","setLoginPopup","newestOnTop","pauseOnFocusLoss","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c2c429ea.chunk.js","sourcesContent":["export enum Btn {\r\n  Submissions = 'Submissions',\r\n  Bind = 'Bind',\r\n  Actions = 'Actions',\r\n}\r\n\r\nexport enum Status {\r\n  NEW = 'NEW',\r\n  BOUND = 'BOUND',\r\n}\r\n\r\nexport type FormValues = {\r\n  id: string;\r\n  companyName: string;\r\n  address: string;\r\n  annualRevenue: number;\r\n  status: Status;\r\n  signedApplication: string;\r\n  submittedBy: string;\r\n};\r\n\r\nexport const draftFormValues = {\r\n  id: '',\r\n  companyName: '',\r\n  address: '',\r\n  annualRevenue: 0,\r\n  status: Status.NEW,\r\n  signedApplication: '',\r\n  submittedBy: '',\r\n};\r\n","import { observable, action } from 'mobx';\r\nimport { createContext, useContext } from 'react';\r\nimport { draftFormValues, FormValues, Status } from '../models/models';\r\nimport UserStore from './userStore';\r\n\r\nclass CurrentDataStore {\r\n  @observable id = '';\r\n  @observable companyName = '';\r\n  @observable address = '';\r\n  @observable annualRevenue = 0;\r\n  @observable status = Status.NEW;\r\n  @observable signedApplication = '';\r\n  @observable submittedBy = '';\r\n\r\n  @observable submissionsToUpdate = draftFormValues;\r\n\r\n  @observable allSubmissions: FormValues[] = [];\r\n\r\n  @action\r\n  setData(data) {\r\n    this.id = data.id;\r\n    this.companyName = data.companyName;\r\n    this.address = data.address;\r\n    this.annualRevenue = data.annualRevenue;\r\n    this.status = data.status;\r\n    this.signedApplication = data.signedApplication;\r\n    this.submittedBy = data.submittedBy;\r\n  }\r\n\r\n  @action\r\n  createOrUpdateNewSubmission = async (data) => {\r\n    if (this.allSubmissions.some((submission) => submission.id === data.id)) {\r\n      this.allSubmissions.forEach((element, index) => {\r\n        if (element.id === data.id) {\r\n          this.allSubmissions[index] = data;\r\n        }\r\n      });\r\n    } else {\r\n      this.allSubmissions.push({\r\n        id: data.id,\r\n        companyName: data.companyName,\r\n        address: data.address,\r\n        annualRevenue: data.annualRevenue,\r\n        status: data.status,\r\n        signedApplication: data.signedApplication,\r\n        submittedBy: data.submittedBy,\r\n      });\r\n    }\r\n    await fetch('http://localhost:4000/updateAllSubmissions  ', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(this.allSubmissions),\r\n    }).then((res) => res.json());\r\n  };\r\n\r\n  @action deleteSubmission = async (id) => {\r\n    this.allSubmissions = this.allSubmissions.filter((submissions) => submissions.id !== id);\r\n\r\n    await fetch('http://localhost:4000/updateAllSubmissions  ', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify(this.allSubmissions),\r\n    }).then((res) => res.json());\r\n\r\n    this.clearCurrentSubmission();\r\n  };\r\n\r\n  @action getCurrentSubmission = () => {\r\n    return {\r\n      id: this.id,\r\n      companyName: this.companyName,\r\n      address: this.address,\r\n      annualRevenue: this.annualRevenue,\r\n      status: this.status,\r\n      signedApplication: this.signedApplication,\r\n      submittedBy: this.submittedBy,\r\n    };\r\n  };\r\n\r\n  @action getAllSubmissions = async () => {\r\n    const all = await fetch('http://localhost:4000/getAllSubmissions', {\r\n      method: 'GET',\r\n    }).then((res) => {\r\n      return res.json();\r\n    });\r\n    if (all.status === false) return false;\r\n    else return (this.allSubmissions = all.allSubmissions);\r\n  };\r\n\r\n  @action clearCurrentSubmission = () => {\r\n    this.id = draftFormValues.id;\r\n    // this.companyName = draftFormValues.companyName;\r\n    // this.address = draftFormValues.address;\r\n    // this.annualRevenue = draftFormValues.annualRevenue;\r\n    this.status = draftFormValues.status;\r\n    this.signedApplication = draftFormValues.signedApplication;\r\n    // this.submittedBy = draftFormValues.submittedBy;\r\n  };\r\n\r\n  @action uploadFile = async (fullName, fileName, formData) => {\r\n    return await fetch(`http://localhost:4000/picture:${fullName}?path=${this.id}&fileName=${fileName}`, {\r\n      method: 'POST',\r\n      body: formData,\r\n    })\r\n      .then((res) => {\r\n        console.log('e= ', res);\r\n        return res.status;\r\n      })\r\n      .catch((er) => {\r\n        console.log('heerere');\r\n      });\r\n  };\r\n}\r\n\r\nexport default createContext(new CurrentDataStore());\r\n","import './header.scss';\r\nimport Actions from '../../pages/Action/Action';\r\nimport Submissions from '../../pages/Submissions/Submissions';\r\nimport Bind from '../../pages/Bind/Bind';\r\nimport { Btn } from '../../models/models';\r\nimport { Fragment, useState, useEffect, useContext } from 'react';\r\nimport CurrentDataStore from '../../stores/currentDataStore';\r\nimport { observer } from 'mobx-react';\r\n\r\ninterface Props {\r\n  renderPage: (Btn) => void;\r\n}\r\n\r\nconst Header = observer((props: Props) => {\r\n  const currentDataStore = useContext(CurrentDataStore);\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <button className=\"btn\" onClick={() => props.renderPage(Btn.Submissions)}>\r\n        Submissions\r\n      </button>\r\n      <button\r\n        className=\"btn\"\r\n        onClick={() => {\r\n          currentDataStore.clearCurrentSubmission();\r\n          props.renderPage(Btn.Actions);\r\n        }}\r\n      >\r\n        New\r\n      </button>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Header;\r\n","import { action, observable } from 'mobx';\r\nimport { createContext } from 'react';\r\n\r\nclass UserStore {\r\n  @observable fullName = '';\r\n  @observable password = '';\r\n  @observable isLoging = false;\r\n\r\n  @action authenticateUser = async () => {\r\n    const resp = await fetch('http://localhost:4000/authenticateUser', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Content-type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ fullName: this.fullName, password: this.password }),\r\n    })\r\n      .then((res) => {\r\n        return res.statusText;\r\n      })\r\n      .catch((err) => {\r\n        console.log('errrrrrr', err);\r\n      });\r\n    if (resp === 'Unauthorized') {\r\n      this.isLoging = false;\r\n      return resp;\r\n    } else return (this.isLoging = true);\r\n  };\r\n}\r\n\r\nexport default createContext(new UserStore());\r\n","import { toast } from 'react-toastify';\r\nimport './styles.min.scss';\r\nclass ToastUtil {\r\n  success = (message: string) => {\r\n    toast.success(message, {\r\n      autoClose: 4000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      draggablePercent: 0,\r\n    });\r\n  };\r\n  error = (message: string) => {\r\n    toast.error(message, {\r\n      autoClose: 4000,\r\n      hideProgressBar: false,\r\n      closeOnClick: true,\r\n      pauseOnHover: true,\r\n      draggable: true,\r\n      draggablePercent: 0,\r\n    });\r\n  };\r\n}\r\n\r\nexport default new ToastUtil();\r\n","import { useContext, useState, useEffect } from 'react';\r\nimport CurrentDataStore from '../../stores/currentDataStore';\r\nimport { useTable } from 'react-table';\r\nimport './submissions.styles.scss';\r\nimport { Btn } from '../../models/models';\r\nimport { observer } from 'mobx-react';\r\nimport UserStore from '../../stores/userStore';\r\nimport ToastUtil from '../../components/toast/toastUtil';\r\n\r\ninterface Props {\r\n  setActivePage: (page) => void;\r\n}\r\n\r\nconst Submissions = observer((props: Props) => {\r\n  const currentDataStore = useContext(CurrentDataStore);\r\n  const userStore = useContext(UserStore);\r\n\r\n  const [currentData, setCurrentData] = useState(currentDataStore);\r\n  const [shouldReloadList, setShouldReloadList] = useState<boolean>(false);\r\n  const [columns, setColumns] = useState([]);\r\n  const [data, setData] = useState<any>([]);\r\n  const [isData, setIsData] = useState<boolean>(false);\r\n\r\n  const deleteSubmission = (submission) => {\r\n    currentDataStore.deleteSubmission(submission.id);\r\n    setShouldReloadList(!shouldReloadList);\r\n  };\r\n\r\n  const bindSubmission = (submission) => {\r\n    const submissionFromCurrentList = currentDataStore.allSubmissions.filter((submissions) => submissions.id === submission.id);\r\n    currentDataStore.setData(submissionFromCurrentList[0]);\r\n    props.setActivePage(Btn.Bind);\r\n\r\n    setShouldReloadList(!shouldReloadList);\r\n  };\r\n\r\n  const editSubmission = (submission) => {\r\n    const submissionFromCurrentList = currentDataStore.allSubmissions.filter((submissions) => submissions.id === submission.id);\r\n    currentDataStore.setData(submissionFromCurrentList[0]);\r\n\r\n    props.setActivePage(Btn.Actions);\r\n  };\r\n\r\n  function download(blob, filename) {\r\n    const url = window.URL.createObjectURL(blob);\r\n    const a = document.createElement('a');\r\n    a.style.display = 'none';\r\n    a.href = url;\r\n    a.download = filename;\r\n    document.body.appendChild(a);\r\n    a.click();\r\n    document.body.removeChild(a);\r\n    window.URL.revokeObjectURL(url);\r\n  }\r\n\r\n  const downloadPdf = async (submission) => {\r\n    if (!submission.signedApplication) return ToastUtil.error('No PDF file, this submission is not bound yet');\r\n    await fetch(\r\n      `http://localhost:4000/getPdf?fileToDownload=${userStore.fullName + '/' + currentDataStore.id + '/' + submission.signedApplication}`\r\n    ).then((res) => {\r\n      res.blob().then((blob) => download(blob, submission.signedApplication));\r\n    });\r\n  };\r\n\r\n  const Columns: any = [\r\n    {\r\n      Header: 'Id',\r\n      accessor: 'id',\r\n    },\r\n    {\r\n      Header: 'Company Name',\r\n      accessor: 'companyName',\r\n    },\r\n    {\r\n      Header: 'Address',\r\n      accessor: 'address',\r\n    },\r\n    {\r\n      Header: 'Annual Revenue',\r\n      accessor: 'annualRevenue',\r\n    },\r\n    {\r\n      Header: 'Status',\r\n      accessor: 'status',\r\n    },\r\n    {\r\n      Header: 'Signed Application',\r\n      accessor: 'signedApplication',\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div>\r\n            <i\r\n              onClick={() => {\r\n                downloadPdf(row.original);\r\n              }}\r\n              className=\"fas fa-file-download\"\r\n              data-tip=\"Download\"\r\n            ></i>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      Header: 'Submitted By',\r\n      accessor: 'submittedBy',\r\n    },\r\n    {\r\n      Header: 'Actions',\r\n      Cell: ({ row }) => {\r\n        return (\r\n          <div>\r\n            <div>\r\n              <i\r\n                onClick={() => {\r\n                  editSubmission(row.original);\r\n                }}\r\n                className=\"fas fa-pen\"\r\n                data-tip=\"Edit\"\r\n              ></i>\r\n              <i\r\n                onClick={() => {\r\n                  deleteSubmission({ ...row.original });\r\n                }}\r\n                data-tip=\"Delete\"\r\n                className=\"fas fa-trash-alt\"\r\n                style={{ paddingLeft: '10%' }}\r\n              ></i>\r\n              <i\r\n                onClick={() => {\r\n                  bindSubmission({ ...row.original });\r\n                }}\r\n                data-tip=\"Bind\"\r\n                className=\"far fa-file-pdf\"\r\n                style={{ paddingLeft: '10%' }}\r\n              ></i>\r\n            </div>\r\n          </div>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      const res = await currentData.getAllSubmissions();\r\n      if (res) {\r\n        setColumns(Columns);\r\n        setData(currentData.allSubmissions);\r\n        return setIsData(true);\r\n      } else {\r\n        return;\r\n      }\r\n    };\r\n\r\n    init();\r\n  }, [shouldReloadList]);\r\n\r\n  const TableInstance = useTable({\r\n    columns,\r\n    data,\r\n  });\r\n\r\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = TableInstance;\r\n  return (\r\n    <div>\r\n      {!isData ? (\r\n        <div> No submissions</div>\r\n      ) : (\r\n        <table {...getTableProps()}>\r\n          <thead>\r\n            {headerGroups.map((headerGroup) => (\r\n              <tr {...headerGroup.getHeaderGroupProps()}>\r\n                {headerGroup.headers.map((column) => (\r\n                  <th {...column.getHeaderProps()}>{column.render('Header')}</th>\r\n                ))}\r\n              </tr>\r\n            ))}\r\n          </thead>\r\n          <tbody {...getTableBodyProps()}>\r\n            {rows.map((row) => {\r\n              prepareRow(row);\r\n              return (\r\n                <tr {...row.getRowProps()}>\r\n                  {row.cells.map((cell) => {\r\n                    return <td {...cell.getCellProps()}>{cell?.render('Cell')}</td>;\r\n                  })}\r\n                </tr>\r\n              );\r\n            })}\r\n          </tbody>\r\n        </table>\r\n      )}\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default Submissions;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport './action.styles.scss';\r\nimport UserStore from '../../stores/userStore';\r\nimport CurrentDataStore from '../../stores/currentDataStore';\r\nimport { Btn, draftFormValues, FormValues, Status } from '../../models/models';\r\n\r\ninterface Props {\r\n  setActivePage: (page) => void;\r\n}\r\n\r\nfunction Action(props: Props) {\r\n  const userStore = useContext(UserStore);\r\n  const currentDataStore = useContext(CurrentDataStore);\r\n  const [isCreateNewMode, setCreateNewMode] = useState(true);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm<FormValues>({\r\n    defaultValues: {\r\n      id: currentDataStore.id ? currentDataStore.id : '',\r\n      companyName: currentDataStore.companyName ? currentDataStore.companyName : '',\r\n      address: currentDataStore?.address ? currentDataStore.address : '',\r\n      status: currentDataStore?.status ? currentDataStore.status : Status.NEW,\r\n      annualRevenue: currentDataStore?.annualRevenue ? currentDataStore.annualRevenue : 0,\r\n      signedApplication: currentDataStore?.signedApplication ? currentDataStore?.signedApplication : '',\r\n      submittedBy: currentDataStore?.submittedBy ? currentDataStore.submittedBy : '',\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (currentDataStore.id === '') {\r\n      reset(draftFormValues);\r\n      setCreateNewMode(true);\r\n    } else setCreateNewMode(false);\r\n  }, []);\r\n\r\n  const onSubmit = (data) => {\r\n    if (currentDataStore.allSubmissions.some((submission) => submission.id === data.id)) {\r\n      currentDataStore.setData(data);\r\n      currentDataStore.createOrUpdateNewSubmission(data);\r\n      props.setActivePage(Btn.Submissions);\r\n      return reset();\r\n    } else {\r\n      const newUserId = uuidv4();\r\n      data.id = newUserId;\r\n      data.status = Status.NEW;\r\n      data.submittedBy = userStore.fullName;\r\n\r\n      currentDataStore.setData(data);\r\n      currentDataStore.createOrUpdateNewSubmission(data);\r\n\r\n      props.setActivePage(Btn.Bind);\r\n      return reset();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"title\">{isCreateNewMode ? 'Create New Submission' : 'Update Submission'}</div>\r\n\r\n      <form className=\"formFields\" onSubmit={handleSubmit(onSubmit)}>\r\n        <input type=\"text\" placeholder={!isCreateNewMode ? currentDataStore.companyName : 'Company Name'} {...register('companyName')} />\r\n        <input type=\"text\" placeholder={!isCreateNewMode ? currentDataStore.address : 'Address'} {...register('address')} />\r\n\r\n        <input\r\n          type=\"number\"\r\n          placeholder={!isCreateNewMode ? currentDataStore.annualRevenue.toString() : 'Annual Revenue'}\r\n          {...register('annualRevenue', { valueAsNumber: true })}\r\n        />\r\n\r\n        <input className=\"submitBtn\" type=\"submit\" />\r\n      </form>\r\n      <button\r\n        className=\"clrBtn\"\r\n        type=\"button\"\r\n        onClick={() => {\r\n          currentDataStore.clearCurrentSubmission();\r\n          setCreateNewMode(true);\r\n          reset(draftFormValues);\r\n        }}\r\n      >\r\n        Create New\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Action;\r\n","import { useContext } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport './Bind.scss';\r\nimport CurrentDataStore from '../../stores/currentDataStore';\r\nimport UserStore from '../../stores/userStore';\r\nimport { Btn, Status } from '../../models/models';\r\nimport ToastUtil from '../../components/toast/toastUtil';\r\n\r\ninterface Props {\r\n  setActivePage: (page) => void;\r\n}\r\n\r\nexport const Bind = (props: Props) => {\r\n  const { register, handleSubmit } = useForm();\r\n  const currentDataStore = useContext(CurrentDataStore);\r\n  const userStore = useContext(UserStore);\r\n\r\n  const onSubmit = async (data) => {\r\n    if (data.picture[0]?.name === undefined) return ToastUtil.error('Please select a PDF file');\r\n    if (data.picture[0].name.split('.')[data.picture[0].name.split('.').length - 1] !== 'pdf') {\r\n      return ToastUtil.error('Please select a PDF file');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('picture', data.picture[0]);\r\n\r\n    await currentDataStore\r\n      .uploadFile(userStore.fullName, data.picture[0].name, formData)\r\n      .then((res) => {\r\n        if (res === 500) return ToastUtil.error(`Got status ${res} from the server`);\r\n        if (res === 200) {\r\n          const currentSubmission = currentDataStore.getCurrentSubmission();\r\n          currentSubmission.status = Status.BOUND;\r\n          currentSubmission.submittedBy = userStore.fullName;\r\n          currentSubmission.signedApplication = '';\r\n          currentSubmission.signedApplication = data.picture[0].name;\r\n          currentDataStore.createOrUpdateNewSubmission(currentSubmission);\r\n          props.setActivePage(Btn.Submissions);\r\n          ToastUtil.success('PDF file uploaded successfully');\r\n        }\r\n      })\r\n      .catch(() => {\r\n        ToastUtil.error('cant uploaded PDF file');\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"title\">Please upload a signed pdf application</div>\r\n      <form onSubmit={handleSubmit(onSubmit)}>\r\n        <input {...register('picture')} type=\"file\" name=\"picture\" />\r\n        <button>Submit</button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Bind;\r\n","import { useContext, useEffect, useState } from 'react';\r\nimport './login.scss';\r\n// import PropTypes from 'prop-types';\r\nimport { useForm } from 'react-hook-form';\r\n// import React from 'react';\r\nimport UserStore from '../../stores/userStore';\r\nimport ToastUtil from '../../components/toast/toastUtil';\r\nimport { Btn } from '../../models/models';\r\n\r\ninterface Props {\r\n  setActivePage: (page) => void;\r\n  onClose: (val) => void;\r\n  show: boolean;\r\n}\r\n\r\nconst Login = (props: Props) => {\r\n  const [show, setShow] = useState(false);\r\n  const userStore = useContext(UserStore);\r\n\r\n  const closeHandler = (e) => {\r\n    setShow(false);\r\n    props.onClose(false);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setShow(props.show);\r\n  }, [props.show]);\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n\r\n  const onSubmit = async (data) => {\r\n    userStore.fullName = data.fullName;\r\n    userStore.password = data.password;\r\n    await userStore.authenticateUser();\r\n    if (!userStore.isLoging) ToastUtil.error('Nooo');\r\n    else {\r\n      closeHandler(false);\r\n      return props.setActivePage(Btn.Submissions);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        visibility: show ? 'visible' : 'hidden',\r\n        opacity: show ? '1' : '0',\r\n      }}\r\n      className={'overlay'}\r\n    >\r\n      <div className={'popup'}>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <section>\r\n            <h1>Login</h1>\r\n            <div className={'field'}>\r\n              <label htmlFor=\"fullName\" className={'fieldText'}>\r\n                FullName:\r\n              </label>\r\n              <input\r\n                id=\"fullName\"\r\n                {...register('fullName', {\r\n                  required: 'required',\r\n                })}\r\n                type=\"fullName\"\r\n                placeholder=\"FullName\"\r\n              />\r\n            </div>\r\n            <div className={'field'}>\r\n              <label htmlFor=\"password\" className={'fieldText'}>\r\n                Password:\r\n              </label>\r\n              <input\r\n                id=\"password\"\r\n                {...register('password', {\r\n                  required: 'required',\r\n                })}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n              />\r\n            </div>\r\n            <button type=\"submit\">SUBMIT</button>\r\n          </section>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Login.propTypes = {\r\n//   title: PropTypes.string.isRequired,\r\n//   show: PropTypes.bool.isRequired,\r\n//   onClose: PropTypes.func.isRequired,\r\n// };\r\n\r\nexport default Login;\r\n","import './App.css';\nimport Header from './components/header/header';\nimport { useContext, useState } from 'react';\nimport { Btn } from './models/models';\nimport Submissions from './pages/Submissions/Submissions';\nimport Actions from './pages/Action/Action';\nimport Bind from './pages/Bind/Bind';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Login from './components/login/Login';\nconst App = () => {\n  const [activePage, setActivePage] = useState(Btn.Submissions);\n  const [loginPopup, setLoginPopup] = useState(true);\n\n  const renderPage = () => {\n    switch (activePage) {\n      case Btn.Submissions:\n        return <Submissions setActivePage={setActivePage} />;\n      case Btn.Bind:\n        return <Bind setActivePage={setActivePage} />;\n      case Btn.Actions:\n        return <Actions setActivePage={setActivePage} />;\n      default:\n        return null;\n    }\n  };\n\n  const popupCloseHandler = () => {\n    setLoginPopup(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header renderPage={setActivePage} />\n      {loginPopup ? <Login onClose={popupCloseHandler} setActivePage={setActivePage} show={loginPopup} /> : renderPage()}\n      <ToastContainer\n        autoClose={4000}\n        hideProgressBar={false}\n        newestOnTop={false}\n        closeOnClick\n        draggable\n        pauseOnHover={false}\n        pauseOnFocusLoss={false}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}